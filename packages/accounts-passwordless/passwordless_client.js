// Used in the various functions below to handle errors consistently
const reportError = (error, callback) => {
  if (callback) {
    callback(error);
  } else {
    throw error;
  }
};

// Attempt to log in with a token.
//
// @param selector {String|Object} One of the following:
//   - {username: (username)}
//   - {email: (email)}
//   - a string which may be a username or email, depending on whether
//     it contains "@".
// @param password {String}
// @param callback {Function(error|undefined)}

/**
 * @summary Log the user in with a one time token.
 * @locus Client
 * @param {Object | String} selector
 *   one time token generated by the server
 * @param {Function} [callback] Optional callback.
 *   Called with no arguments on success, or with a single `Error` argument
 *   on failure.
 * @importFromPackage meteor
 */
Meteor.loginWithToken = (selector, callback) => {
  Accounts.callLoginMethod({
    methodArguments: [
      {
        user: selector,
      },
    ],
    userCallback: error => {
      if (error) {
        reportError(error, callback);
      } else {
        callback && callback();
      }
    },
  });
};

